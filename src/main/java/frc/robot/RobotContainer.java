// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Shooter m_shooter = new Shooter();
    public final Loader m_loader = new Loader();
    public final Storage m_storage = new Storage();
    public final Acquisition m_acquisition = new Acquisition();
    public final Climber m_climber = new Climber();
    public final Chassis m_chassis = new Chassis();

// Joysticks
private final XboxController xboxController1 = new XboxController(1);
private final XboxController xboxController0 = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("AcquisitionLowerCommand", new AcquisitionLowerCommand( m_acquisition ));
    SmartDashboard.putData("AcquisitionRaiseCommand", new AcquisitionRaiseCommand());
    SmartDashboard.putData("AcquisitionSpitCommand", new AcquisitionSpitCommand( m_acquisition ));
    SmartDashboard.putData("ShootAllCommand", new ShootAllCommand( m_shooter ));
    SmartDashboard.putData("ClimberRetractCommand", new ClimberRetractCommand( m_climber ));
    SmartDashboard.putData("ClimberExtendCommand", new ClimberExtendCommand( m_climber ));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_chassis.setDefaultCommand(new DriveCommand(m_chassis, xboxController0));
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton leftBumper = new JoystickButton(xboxController0, XboxController.Button.kLeftBumper.value);        
leftBumper.whenPressed(new AcquisitionLowerCommand( m_acquisition ) ,true);
    SmartDashboard.putData("leftBumper",new AcquisitionLowerCommand( m_acquisition ) );

final JoystickButton rightBumper = new JoystickButton(xboxController0, XboxController.Button.kRightBumper.value);        
rightBumper.whenPressed(new AcquisitionRaiseCommand() ,true);
    SmartDashboard.putData("rightBumper",new AcquisitionRaiseCommand() );

final JoystickButton bButton = new JoystickButton(xboxController0, XboxController.Button.kB.value);        
bButton.whenPressed(new AcquisitionSpitCommand( m_acquisition ) ,true);
    SmartDashboard.putData("bButton",new AcquisitionSpitCommand( m_acquisition ) );

final JoystickButton aButton = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
aButton.whenPressed(new ShootAllCommand( m_shooter ) ,true);
    SmartDashboard.putData("aButton",new ShootAllCommand( m_shooter ) );

final JoystickButton xButton = new JoystickButton(xboxController1, XboxController.Button.kX.value);        
xButton.whenPressed(new ClimberRetractCommand( m_climber ) ,true);
    SmartDashboard.putData("xButton",new ClimberRetractCommand( m_climber ) );

final JoystickButton yButton = new JoystickButton(xboxController1, XboxController.Button.kY.value);        
yButton.whenPressed(new ClimberExtendCommand( m_climber ) ,true);
    SmartDashboard.putData("yButton",new ClimberExtendCommand( m_climber ) );

    //use XboxController0 fro commands
    final JoystickButton AButton = new JoystickButton(xboxController0, XboxController.Button.kA.value);        
    AButton.whenPressed(new ShootAllCommand( m_shooter ) ,true);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getxboxController0() {
      return xboxController0;
    }

public XboxController getxboxController1() {
      return xboxController1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

